//import structures.Stack;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.Stack;


public class Main {

    /*
     * Complete the equalStacks function below.
     */
    static int equalStacks(int[] h1, int[] h2, int[] h3) {

        int maxSize = 0;

        Stack<StackNode> stack1 = new Stack<StackNode>();
        fillStack(h1, stack1);

        Stack<StackNode> stack2 = new Stack<StackNode>();
        fillStack(h2, stack2);

        Stack<StackNode> stack3 = new Stack<StackNode>();
        fillStack(h3, stack3);

        while (true) {

            int s1 = !stack1.isEmpty() ? stack1.peek().size : 0;
            int s2 = !stack2.isEmpty() ? stack2.peek().size : 0;
            if (s1 < s2) {
                stack2.pop();
                continue;
            } else if (s1 > s2) {
                stack1.pop();
                continue;
            }

            s2 = !stack2.isEmpty() ? stack2.peek().size : 0;
            int s3 = !stack3.isEmpty() ? stack3.peek().size : 0;
            if (s2 < s3) {
                stack3.pop();
                continue;
            } else if (s2 > s3) {
                stack2.pop();
                continue;
            }

            if (s1 == s2 && s2 == s3) {
                maxSize = s1;
                break;
            }
        }
        return maxSize;
    }

    private static void fillStack(int[] arr, Stack<StackNode> stack) {
        int tmpSum = 0;
        for (int i = arr.length - 1; i >= 0; i--) {
            tmpSum += arr[i];
            stack.push(new StackNode(arr[i], tmpSum));
        }
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
//        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] n1N2N3 = scanner.nextLine().split(" ");

        int n1 = Integer.parseInt(n1N2N3[0].trim());

        int n2 = Integer.parseInt(n1N2N3[1].trim());

        int n3 = Integer.parseInt(n1N2N3[2].trim());

        int[] h1 = new int[n1];

        String[] h1Items = scanner.nextLine().split(" ");

        for (int h1Itr = 0; h1Itr < n1; h1Itr++) {
            int h1Item = Integer.parseInt(h1Items[h1Itr].trim());
            h1[h1Itr] = h1Item;
        }

        int[] h2 = new int[n2];

        String[] h2Items = scanner.nextLine().split(" ");

        for (int h2Itr = 0; h2Itr < n2; h2Itr++) {
            int h2Item = Integer.parseInt(h2Items[h2Itr].trim());
            h2[h2Itr] = h2Item;
        }

        int[] h3 = new int[n3];

        String[] h3Items = scanner.nextLine().split(" ");

        for (int h3Itr = 0; h3Itr < n3; h3Itr++) {
            int h3Item = Integer.parseInt(h3Items[h3Itr].trim());
            h3[h3Itr] = h3Item;
        }

        int result = equalStacks(h1, h2, h3);

//        bufferedWriter.write(String.valueOf(result));
//        bufferedWriter.newLine();
//        bufferedWriter.close();
    }
}

class StackNode {
    int val;
    int size;

    StackNode(int val, int size) {
        this.val = val;
        this.size = size;
    }

}